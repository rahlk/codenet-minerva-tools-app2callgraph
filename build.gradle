apply plugin: 'java-library'
apply plugin: 'application'
apply plugin: 'eclipse'

sourceCompatibility = 1.11
version = '1.0-dev'

repositories {
    mavenCentral()
}

if (project.hasProperty('mainClass')) {
    mainClassName = project.getProperty('mainClass')
} else {
    // use a default
    mainClassName = "io.tackle.dgi.code2graph.Main"
}

// Remove that nagging bin folder vscode seems to generate every single time
clean.doFirst {
    delete "${rootDir}/bin"
}

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'

    implementation 'commons-io:commons-io:2.8.0'

    implementation 'org.apache.logging.log4j:log4j-api:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'
    def walaVersion = '1.5.7'

    // implementation "com.ibm.wala:com.ibm.wala.shrike:${walaVersion}"
    implementation "com.ibm.wala:com.ibm.wala.util:${walaVersion}"
    implementation "com.ibm.wala:com.ibm.wala.core:${walaVersion}"
    implementation "com.ibm.wala:com.ibm.wala.cast:${walaVersion}"
    implementation "com.ibm.wala:com.ibm.wala.cast.java:${walaVersion}"
    implementation "com.ibm.wala:com.ibm.wala.cast.java.ecj:${walaVersion}"

    implementation "org.eclipse.jdt:org.eclipse.jdt.core:3.21.0"
    implementation "org.eclipse.platform:org.eclipse.core.commands:3.9.700"
    implementation "org.eclipse.platform:org.eclipse.core.contenttype:3.7.1000"
    implementation "org.eclipse.platform:org.eclipse.core.expressions:3.7.100"
    implementation "org.eclipse.platform:org.eclipse.core.filesystem:1.9.0"
    implementation "org.eclipse.platform:org.eclipse.core.jobs:3.11.0"
    implementation "org.eclipse.platform:org.eclipse.core.resources:3.14.0"
    implementation "org.eclipse.platform:org.eclipse.core.runtime:3.17.100"
    implementation "org.eclipse.platform:org.eclipse.equinox.app:1.5.100"
    implementation "org.eclipse.platform:org.eclipse.equinox.common:3.14.100"
    implementation "org.eclipse.platform:org.eclipse.equinox.preferences:3.8.200"
    implementation "org.eclipse.platform:org.eclipse.equinox.registry:3.10.200"
    implementation "org.eclipse.platform:org.eclipse.osgi:3.16.300"
    implementation "org.eclipse.platform:org.eclipse.text:3.11.0"

    implementation 'org.json:json:20220924'
    implementation 'org.jgrapht:jgrapht-core:1.5.1'
    implementation 'org.jgrapht:jgrapht-io:1.5.1'
    implementation 'org.jgrapht:jgrapht-ext:1.5.1'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}

task fatjar(type: Jar) {
    archiveBaseName = 'code2graph'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes  'Implementation-Title': 'Tackle DGI WALA Code2graph',
                    'Implementation-Version': archiveVersion,
                    'Main-Class': 'io.tackle.dgi.code2graph.Main'
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task propertyTypes(){
    doLast{
        if (project.hasProperty("args")) {
            println "Our input argument with project property ["+project.getProperty("args")+"]"
        }
        println "Our input argument with system property ["+System.getProperty("args")+"]"
    }
}


if (project.hasProperty("args")) {
    ext.cmdargs = project.getProperty("args")
} else { 
    ext.cmdargs = ""
}
task code2graph(type: JavaExec) {
    group = "Execution"
    description = "WALA code to system dependency graph"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = mainClassName
    args cmdargs.split()
}
task daytrader(type: JavaExec) {
    group = "Execution"
    description = "WALA code to system dependency graph"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = mainClassName
    args "-i etc/demo/daytrader-ee7-ejb.jar -o .".split()
}